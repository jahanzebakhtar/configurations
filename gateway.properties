allowed.origin=javalibraries.com
#Name of the application
spring.application.name=gateway
#Server runs on this port
server.port=443

#Eureka server url for registering
#This is eureka client

eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#eureka.client.region = default
eureka.client.registryFetchIntervalSeconds = 5
#register url to server
eureka.client.serviceUrl.defaultZone=http://10.0.0.3:8080/eureka/
eureka.instance.hostname=gateway


#All url come with prefix/api will interpret
#zuul.routes.delta.url=http://localhost:8085/delta
zuul.routes.victor.service-id=victor
zuul.routes.delta.service-id=delta
zuul.routes.upload.service-id=upload
#zuul.routes.login.service-id=tokengenerator

#Spring Cloud Netflix Zuul uses Netflix’s Ribbon to perform client-side load balancing,
# and by default, Ribbon would use Netflix Eureka for service discovery
#ribbon.eureka.enabled = false

#Ribbon now can’t use Eureka to look up services so we must specify url for storage because it is being used by feign client
#delta.ribbon.listOfServers = localhost:8081

# The format used for the keystore. It could be set to JKS in case it is a JKS file
##server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
##server.ssl.key-store=classpath:keystore/congress.p12
# The password used to generate the certificate
##server.ssl.key-store-password=1ND1@N@T10N
# The alias mapped to the certificate
##server.ssl.key-alias=india-national-congress
##security.require-ssl=true
#trust store location
##trust.store=classpath:keystore/congress.p12
#trust store password
##trust.store.password=1ND1@N@T10N

## MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/cnc?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=wud19@WUD

#`hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false

# Hibernate
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
